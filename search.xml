<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Promise</title>
      <link href="/2022/03/19/promise/"/>
      <url>/2022/03/19/promise/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>封装异步操作，成功执行resolve函数，并把成功的结果传给它；失败执行reject函数，也把失败的结果传给它。<code>.then</code>方法处理成功和失败的结果，成功调用第一个函数，失败调用第二个函数</p><p>是一个构造函数，本身同步执行，<code>.then</code>方法异步执行</p><p>支持链式调用，解决回调地狱问题</p><img src="/2022/03/19/promise/image1.png" class=""><p><img src="Promise/image1.png" alt="image1"></p><img src="/2022/03/19/promise/image2.png" class=""><img src="/2022/03/19/promise/image3.png" class=""><p>Promise函数的resolve, reject, all, race方法</p><p><code>Promise.resolve()</code>如果传入Promise对象，返回是成功还是失败取决于传入的Promise对象是成功还是失败，且成功或失败的结果为传入的Promise对象的成功或失败的结果</p><img src="/2022/03/19/promise/image4.png" class=""><p><code>Promise.reject()</code>无论传什么都是返回失败的Promise对象，且失败的结果为传入的内容</p><p><code>Promise.all()</code>传入包含Promise对象的数组，如果都成功，那么返回成功的Promise对象，且成功的结果是一个数组，包含传入的Promise对象的成功的结果；如果传入有失败，那么返回失败的Promise对象，且失败的结果是一个数组，包含传入的Promise对象的失败的结果</p><img src="/2022/03/19/promise/image5.png" class=""><img src="/2022/03/19/promise/image6.png" class=""><p>promise.then()返回的新 promise 的结果状态：</p><ul><li>如果抛出异常, 新 promise 变为 rejected, reason 为抛出的异常</li><li>如果返回的是非 promise 的任意值, 新 promise 变为 resolved, value 为返回的值</li><li>如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果</li></ul><p>async和await使用(异步编程终极解决方案，完全摒弃回调函数)：</p><p>async函数返回promise对象，结果状态和.then()返回的新promise结果状态判断类似</p><img src="/2022/03/19/promise/image7.png" class=""><img src="/2022/03/19/promise/image8.png" class=""><img src="/2022/03/19/promise/image9.png" class="">]]></content>
      
      
      <categories>
          
          <category> front end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的常用命令</title>
      <link href="/2021/12/26/git-de-chang-yong-ming-ling/"/>
      <url>/2021/12/26/git-de-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Git的常用命令"><a href="#Git的常用命令" class="headerlink" title="Git的常用命令"></a>Git的常用命令</h1><h2 id="一-Git基本命令"><a href="#一-Git基本命令" class="headerlink" title="一. Git基本命令"></a>一. Git基本命令</h2><ul><li><p>git init //创建本地仓库</p></li><li><p>git add . //将工作区中所有修改提交到暂存区</p></li><li><p>git commit -m “first commit” //将暂存区的所有修改提交到当前分支，引号内是该次提交的注释</p></li><li><p>git status //查看当前仓库的状态</p></li><li><p>git diff //查看修改</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git diff test.txt //查看该文件修改了哪些内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git diff  4b43231 51fca33 //查看两次提交版本之间的修改<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>git log //查看以往的提交记录以及每次版本的完整hash值</p></li><li><p>git reset –hard 51fca33 //回退到之前的版本</p></li><li><p>git reflog //查看历史命令操作记录(包含每次版本的7位hash值)</p></li></ul><h2 id="二-远程仓库"><a href="#二-远程仓库" class="headerlink" title="二. 远程仓库"></a>二. 远程仓库</h2><ul><li>git clone <url> //不需要git init，直接克隆远程仓库，该远程库别名默认为origin</url></li><li>git remote -v //查看远程版本库信息</li><li>git remote remove &lt;别名&gt; //删除远程仓库</li><li>当使用git clone命令时已经自动关联了远程仓库，如果是在本地git init自己建的版本库，要想和远程仓库进行关联，需要命令<code>git remote add &lt;别名&gt; &lt;url&gt;</code>，然后就能进行push和pull命令</li><li>git push &lt;别名&gt; &lt;分支名&gt; //将本地仓库中的修改提交到远程仓库</li><li>git fetch &lt;别名&gt; &lt;分支名&gt; //下载远程仓库中的修改到远程跟踪分支上，然后git merge 别名/分支名，进行本地合并</li><li>git pull &lt;别名&gt; &lt;分支名&gt; //下载远程仓库中的修改并进行快速合并(fetch+merge)</li></ul><h2 id="三-分支管理"><a href="#三-分支管理" class="headerlink" title="三. 分支管理"></a>三. 分支管理</h2><ul><li>git branch //查看所有本地分支</li><li>git branch &lt;新分支名&gt; //创建一个新的分支</li><li>git checkout &lt;分支名&gt; //切换到指定分支</li><li>git branch -d &lt;分支名&gt; //删除一个分支</li><li>git merge &lt;分支名&gt; //将指定的分支合并到当前分支</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git配置SSH-KEY</title>
      <link href="/2021/12/25/git-pei-zhi-ssh-key/"/>
      <url>/2021/12/25/git-pei-zhi-ssh-key/</url>
      
        <content type="html"><![CDATA[<h1 id="Git配置SSH-KEY"><a href="#Git配置SSH-KEY" class="headerlink" title="Git配置SSH-KEY"></a>Git配置SSH-KEY</h1><h2 id="一-配置SSH-KEY前"><a href="#一-配置SSH-KEY前" class="headerlink" title="一. 配置SSH-KEY前"></a>一. 配置SSH-KEY前</h2><p>右键点击<code>Git Bash Here</code>，检查用户名和邮箱是否配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果未配置，则执行下列命令行进行全局配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global user.name "your name"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global user.email "your email"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二-单个平台配置SSH-KEY"><a href="#二-单个平台配置SSH-KEY" class="headerlink" title="二. 单个平台配置SSH-KEY"></a>二. 单个平台配置SSH-KEY</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh-keygen -t rsa -C "对应平台注册的邮箱地址"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回车后会确认密钥的保存路径，默认是<code>C: \Users\你的用户名\.ssh</code>，如不需要改则直接回车；</p><p>如果该路径下已经有密钥文件，则会被覆盖；</p><p>创建密钥的密码并确认密码，如不需要则直接回车；</p><p>之后在<code>.ssh</code>下会生成<code>id_rsa(存私钥)</code>和<code>id_rsa.pub(存公钥)</code>的两个文件；</p><p>打开GitHub，<code>Settings -- SSH and GPG keys -- New SSH key</code>，复制<code>id_rsa.pub</code>中的公钥到输入框，再为这个key取个title，一般用来区分不同主机；</p><p>测试是否配置成功：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时就可以用ssh的方式提交了，记得要再修改一下本地仓库中 <code>.git -- config文件 -- url</code></p><h2 id="三-多平台配置SSH-KEY"><a href="#三-多平台配置SSH-KEY" class="headerlink" title="三. 多平台配置SSH-KEY"></a>三. 多平台配置SSH-KEY</h2><p>和单平台配置差别不大，主要是生成密钥的时候要改下存密钥的文件名</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh -keygen -t rsa -C "平台注册的邮箱地址" -f "生成的rsa文件名"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若-f后面只带文件名，而非路径，则依旧是在默认目录下生成密钥文件</p><p>如配置gitee平台的SSH：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh -keygen -t rsa -C "平台注册的邮箱地址" -f "gitee_id_rsa"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试是否配置成功：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh -T git@gitee.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四-多台电脑共用一个SSH-KEY"><a href="#四-多台电脑共用一个SSH-KEY" class="headerlink" title="四. 多台电脑共用一个SSH-KEY"></a>四. 多台电脑共用一个SSH-KEY</h2><p>一台电脑一对密钥，公钥添加在GitHub上，私钥保存在本地；</p><p>如果要共用一对密钥的话，可以先在别的设备上生成ssh key，再替换成相应的<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件</p><p>注意不能直接复制粘贴文件内容进行内容替换，必须要文件替换！</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Study Notes--《Python编程 从入门到实践》</title>
      <link href="/2021/12/19/study-notes-python-bian-cheng-cong-ru-men-dao-shi-jian/"/>
      <url>/2021/12/19/study-notes-python-bian-cheng-cong-ru-men-dao-shi-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Study-Notes"><a href="#Study-Notes" class="headerlink" title="Study Notes"></a>Study Notes</h1><h2 id="第二章-变量和简单数据类型"><a href="#第二章-变量和简单数据类型" class="headerlink" title="第二章 变量和简单数据类型"></a>第二章 变量和简单数据类型</h2><h3 id="1、变量"><a href="#1、变量" class="headerlink" title="1、变量"></a>1、变量</h3><h3 id="2、字符串"><a href="#2、字符串" class="headerlink" title="2、字符串"></a>2、字符串</h3><ul><li>字符串就是一系列字符，用””或’’括起来的都是字符串</li><li>方法<code>title()</code>首字母大写每个单词；方法<code>upper()</code>全大写；方法<code>lower()</code>全小写</li><li><code>\t</code>类似ta；，<code>\n</code>换行</li><li><code>strip()</code>删除字符串两端空格；<code>lstrip()</code>删除字符串开头空格；<code>rstrip()</code>删除字符串末尾空格</li></ul><h3 id="3、数字"><a href="#3、数字" class="headerlink" title="3、数字"></a>3、数字</h3><ul><li>整数</li><li>浮点数<ul><li>小数点的数字都是浮点数</li><li>在字符串中使用数字时，需要使用函数str()，把非字符串值表示为字符串</li></ul></li></ul><h2 id="第三章-列表简介"><a href="#第三章-列表简介" class="headerlink" title="第三章 列表简介"></a>第三章 列表简介</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#常见列表</span>bicycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span><span class="token string">'cannondale'</span><span class="token punctuation">,</span><span class="token string">'redline'</span><span class="token punctuation">,</span><span class="token string">'specialized'</span><span class="token punctuation">]</span><span class="token comment">#空列表</span>cars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1、访问列表元素"><a href="#1、访问列表元素" class="headerlink" title="1、访问列表元素"></a>1、访问列表元素</h3><p><code>bicycles[0]</code> 即访问列表中的第一个元素<br><code>bicycles[-1]</code> 即访问列表中的最后一个元素<br>==第一个列表元素的索引是0==<br>方法<code>title()</code>依然适用，<code>bicycles[0].title()</code></p><h3 id="2、修改元素"><a href="#2、修改元素" class="headerlink" title="2、修改元素"></a>2、修改元素</h3><ul><li><code>bicycles[0] = 'ducati'</code><br>此时<code>print(bicycles)</code>变成<code>['ducati','cannondale','redline','specialized']</code></li></ul><h3 id="3、添加元素"><a href="#3、添加元素" class="headerlink" title="3、添加元素"></a>3、添加元素</h3><ul><li>方法<code>append()</code>将新元素添加到列表==末尾==<ul><li><code>bicycles.append('ducati')</code><br>此时<code>print(bicycles)</code>变成<code>['trek','cannondale','redline','specialized','ducati']</code></li></ul></li><li>方法<code>insert()</code>可在列表的==任何位置==添加新元素<ul><li><code>bicycles.insert(1,'ducati')</code><br>此时<code>print(bicycles)</code>变成<code>['trek','ducati','cannondale','redline','specialized']</code></li></ul></li></ul><h3 id="4、删除元素"><a href="#4、删除元素" class="headerlink" title="4、删除元素"></a>4、删除元素</h3><ul><li><p>用<code>del</code>语句删除列表中的元素<br><code>del bicycles[1]  #删除列表中第二个元素cannondale</code></p></li><li><p>方法<code>pop()</code>删除列表末尾的元素，且能返回该元素并存储在变量中<br><code>popped_bicycle = bicycles.pop()</code></p><p>方法<code>pop(1)</code>删除列表中第二个元素</p></li><li><p>方法<code>remove()</code>根据值删除元素（但只删除第一个指定的值，若该元素在列表中重复出现，则需要使用循环）<br><code>bicycles.remove('cannondale')</code></p></li></ul><h3 id="5、改变列表排列顺序（用于列表中的值都是小写的情况）"><a href="#5、改变列表排列顺序（用于列表中的值都是小写的情况）" class="headerlink" title="5、改变列表排列顺序（用于列表中的值都是小写的情况）"></a>5、改变列表排列顺序（用于列表中的值都是小写的情况）</h3><ul><li><p>方法<code>sort()</code>按元素首字母顺序排序，<code>bicycles.sort()</code></p><p>方法<code>sort(reverse=True)</code>按与元素首字母顺序相反的顺序排序，<code>bicycles.sort(reverse=True)</code></p></li><li><p>函数<code>sorted()</code>对列表进行临时排序，并不改变列表原顺序，<code>print(sorted(bicycles))</code></p></li><li><p>方法<code>reverse()</code>能反转列表元素的排列顺序（倒着打印），<code>bicycles.reverse()</code></p></li><li><p>函数<code>len()</code>能返回列表的长度，<code>length = len(bicycles)</code></p></li></ul><h2 id="第四章-操作列表"><a href="#第四章-操作列表" class="headerlink" title="第四章 操作列表"></a>第四章 操作列表</h2><h3 id="1、遍历整个列表"><a href="#1、遍历整个列表" class="headerlink" title="1、遍历整个列表"></a>1、遍历整个列表</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">magicians <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'alice'</span><span class="token punctuation">,</span><span class="token string">'david'</span><span class="token punctuation">,</span><span class="token string">'carolina'</span><span class="token punctuation">]</span><span class="token keyword">for</span> magician <span class="token keyword">in</span> magicians<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>magician<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>magician是用于存储列表中每个元素的临时变量，可指定任何名称</li></ul><h3 id="2、创建数字列表"><a href="#2、创建数字列表" class="headerlink" title="2、创建数字列表"></a>2、创建数字列表</h3><ul><li><p>函数<code>range()</code>能生成一系列数字</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> value <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>range(1,5)</code>只能打印数字1~4（==从第一个值开始数，在到达第二个值前停止==）</p></li><li><p>函数<code>list()</code>能将<code>range()</code>的结果直接转换为列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">numbers <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token comment"># 输出[1,2,3,4,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>range(1,6,2)</code>第三个参数是步长，即1,3,5</p></li><li><p>数字列表的Python函数：<code>min()</code>、<code>max()</code>、<code>sum()</code>等（括号里填列表名称）</p></li></ul><h3 id="3、使用列表的一部分"><a href="#3、使用列表的一部分" class="headerlink" title="3、使用列表的一部分"></a>3、使用列表的一部分</h3><ul><li><p>切片（即列表的一部分元素）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">players <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'charles'</span><span class="token punctuation">,</span><span class="token string">'martina'</span><span class="token punctuation">,</span><span class="token string">'michael'</span><span class="token punctuation">,</span><span class="token string">'florence'</span><span class="token punctuation">,</span><span class="token string">'eli'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>players<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 输出列表['charles','martina','michael']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>players[0:3]</code>是提取了列表中索引为0~2的三个元素，此处和<code>range()</code>类似，==从第一个值开始数，在到达第二个值前停止==</p><p><code>players[:3]</code>没有指定起始索引，自动从列表开头到索引2</p><p><code>players[2:]</code>没有指定结束索引，自动从索引2到列表末尾</p><p><code>players[-3:]</code>提取列表中最后三个元素（从倒数第三个到列表末尾）</p></li><li><p>遍历切片</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">players <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'charles'</span><span class="token punctuation">,</span><span class="token string">'martina'</span><span class="token punctuation">,</span><span class="token string">'michael'</span><span class="token punctuation">,</span><span class="token string">'florence'</span><span class="token punctuation">,</span><span class="token string">'eli'</span><span class="token punctuation">]</span><span class="token keyword">for</span> player <span class="token keyword">in</span> players<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>复制列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_food <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pizza'</span><span class="token punctuation">,</span><span class="token string">'falafel'</span><span class="token punctuation">,</span><span class="token string">'carrot cake'</span><span class="token punctuation">]</span>friend_food <span class="token operator">=</span> my_food<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复制列表要使用切片<br><code>friend_food = my_food</code>  <strong>这是行不通的</strong></p></li></ul><h3 id="4、元组（不能修改值的列表）"><a href="#4、元组（不能修改值的列表）" class="headerlink" title="4、元组（不能修改值的列表）"></a>4、元组（不能修改值的列表）</h3><ul><li><p>定义元组dimension：<code>dimensions = (200,50)</code>，元组是圆括号而不是方括号</p></li><li><p>遍历元组（和列表一样）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dimensions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">for</span> dimension <span class="token keyword">in</span> dimensions<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dimension<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>虽然不能修改元组的元素，但可以重新给存储元组的变量赋值<br><code>dimension = (400,100)</code></p></li></ul><h2 id="第五章-if语句"><a href="#第五章-if语句" class="headerlink" title="第五章 if语句"></a>第五章 if语句</h2><ul><li>两个大小写不同的字符串会被视为不相等</li><li>相等运算符是<code>==</code>；不相等运算符是<code>!=</code></li><li>检查特定元素是否包含在列表中用<code>in</code>：<code>if 'audi' in cars:</code><br>检查特定元素是否不包含在列表中用<code>not in</code>：<code>if 'audi' not in cars:</code></li><li>检查列表不是空的：<code>if cars:</code>，意为如果列表cars不是空的</li></ul><h3 id="1、多个if语句示例"><a href="#1、多个if语句示例" class="headerlink" title="1、多个if语句示例"></a>1、多个if语句示例</h3><h4 id="1-1-简单的if语句"><a href="#1-1-简单的if语句" class="headerlink" title="1.1 简单的if语句"></a>1.1 简单的if语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> conditonal_test<span class="token punctuation">:</span>    do something<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>if 语句如果测试通过则执行其后面所有缩进的代码行，否则忽略它们</p><h4 id="1-2-if-else-语句"><a href="#1-2-if-else-语句" class="headerlink" title="1.2 if-else 语句"></a>1.2 if-else 语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> conditional_test<span class="token punctuation">:</span>    do something<span class="token keyword">else</span><span class="token punctuation">:</span>    do something<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-if-elif-else-结构"><a href="#1-3-if-elif-else-结构" class="headerlink" title="1.3 if-elif-else 结构"></a>1.3 if-elif-else 结构</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> conditional_test1<span class="token punctuation">:</span>    do something<span class="token keyword">elif</span> conditonal_test2<span class="token punctuation">:</span>    do something<span class="token keyword">else</span><span class="token punctuation">:</span>    do something<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Python只执行if-elif-else 结构中的一个代码块，<strong>当通过其中一个条件测试后</strong>，Python将执行紧跟它后面的缩进代码，<strong>并跳过余下的测试</strong></p><h4 id="1-4-使用多个-elif-代码块"><a href="#1-4-使用多个-elif-代码块" class="headerlink" title="1.4 使用多个 elif 代码块"></a>1.4 使用多个 elif 代码块</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> conditional_test1<span class="token punctuation">:</span>    do something<span class="token keyword">elif</span> conditonal_test2<span class="token punctuation">:</span>    do something<span class="token keyword">elif</span> conditonal_test3<span class="token punctuation">:</span>    do something<span class="token keyword">else</span><span class="token punctuation">:</span>    do something<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-5-省略-else-代码块"><a href="#1-5-省略-else-代码块" class="headerlink" title="1.5 省略 else 代码块"></a>1.5 省略 else 代码块</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> conditional_test1<span class="token punctuation">:</span>    do something<span class="token keyword">elif</span> conditonal_test2<span class="token punctuation">:</span>    do something<span class="token keyword">elif</span> conditonal_test3<span class="token punctuation">:</span>    do something<span class="token keyword">elif</span> conditonal_test4<span class="token punctuation">:</span>    do something<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 if-elif 结构后面不一定要有 else 代码块，else 包罗万象，可能会引入无效或者恶意数据，如果知道最终要测试的条件，<strong>可以用 elif 代码来替代 else 代码块</strong></p><h4 id="1-6-测试多个条件"><a href="#1-6-测试多个条件" class="headerlink" title="1.6 测试多个条件"></a>1.6 测试多个条件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> conditional_test1<span class="token punctuation">:</span>    do something<span class="token keyword">if</span> conditional_test2<span class="token punctuation">:</span>    do something<span class="token keyword">if</span> conditional_test3<span class="token punctuation">:</span>    do something<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处三个 if 代码块都能够被执行，而 if-elif-else 结构只能执行通过测试后的相应缩进代码块，并跳过余下测试</p><h2 id="第六章-字典"><a href="#第六章-字典" class="headerlink" title="第六章 字典"></a>第六章 字典</h2><h3 id="1、字典简介"><a href="#1、字典简介" class="headerlink" title="1、字典简介"></a>1、字典简介</h3><p><code>alien_0 = {'color': 'green', 'points': 5}</code></p><p>字典用放在花括号{}里的一系列键-值对表示；alien_0是字典名；键和值之间用冒号分隔，键-值对之间用逗号分隔</p><h4 id="1-1-访问字典中的值"><a href="#1-1-访问字典中的值" class="headerlink" title="1.1 访问字典中的值"></a>1.1 访问字典中的值</h4><p><code>alien_0['color']</code>指定字典名和放在方括号内的键<br><code>print(alien_0['color'])</code>返回值<code>green</code></p><h4 id="1-2-添加键-值对"><a href="#1-2-添加键-值对" class="headerlink" title="1.2 添加键-值对"></a>1.2 添加键-值对</h4><p><code>alien_0['x_position'] = 0</code>依次指定字典名、用方括号括起的键和相关联的值（添加顺序和最终存储顺序未必一样）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建空字典</span>alien_0 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>alien_0<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'green'</span>alien_0<span class="token punctuation">[</span>'points<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>alien_0<span class="token punctuation">)</span>        <span class="token comment">#输出 alien_0 = {'color': 'green', 'points': 5}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-修改字典中的值"><a href="#1-3-修改字典中的值" class="headerlink" title="1.3 修改字典中的值"></a>1.3 修改字典中的值</h4><p><code>alien_0['color'] = 'yellow'</code>依次指定字典名、用方括号括起的键和相关联的新值</p><h4 id="1-4-删除键-值对"><a href="#1-4-删除键-值对" class="headerlink" title="1.4 删除键-值对"></a>1.4 删除键-值对</h4><p>使用<code>del</code>语句：<code>del alien_0['color'] </code>指定字典名和要删除的键</p><h3 id="2、遍历字典"><a href="#2、遍历字典" class="headerlink" title="2、遍历字典"></a>2、遍历字典</h3><h4 id="2-1-遍历所有的键-值对"><a href="#2-1-遍历所有的键-值对" class="headerlink" title="2.1 遍历所有的键-值对"></a>2.1 遍历所有的键-值对</h4><p><code>for name, language in favourite_languages.items():</code></p><p>name和language分别是存储键和值的临时变量，遍历键-值对要**使用方法<code>items()</code>**，它返回一个键-值对列表</p><h4 id="2-2-遍历字典中的所有键"><a href="#2-2-遍历字典中的所有键" class="headerlink" title="2.2 遍历字典中的所有键"></a>2.2 遍历字典中的所有键</h4><p><code>for name in favourite_languages.keys():</code>或者<code>for name in favourite_languages:</code></p><p>name是存储键的临时变量，遍历键要**使用方法<code>keys()</code>**，它返回包含所有键的列表，即<code>favourite_languages.keys()</code>是列表<br><code>favourite_languages[name]</code>在循环中，可使用当前建来访问与之相关联的值<br><code>if 'erin' not in favourite_languages.keys():</code>判断 ‘erin’ 是否在这个包含所有键的列表中</p><h4 id="2-3-按顺序遍历字典中的所有键"><a href="#2-3-按顺序遍历字典中的所有键" class="headerlink" title="2.3 按顺序遍历字典中的所有键"></a>2.3 按顺序遍历字典中的所有键</h4><p>**使用函数<code>sorted()</code>**：<code>for name in sorted(favourite_languages.keys()):</code></p><h4 id="2-4-便利字典中的所有值"><a href="#2-4-便利字典中的所有值" class="headerlink" title="2.4 便利字典中的所有值"></a>2.4 便利字典中的所有值</h4><p><code>for language in favourite_languages.values():</code></p><p>**使用方法<code>values()</code>**，它返回一个值列表</p><p><code>favourite_languages.values()</code>这个包含所有值的列表可能有重复的值，<strong>为了剔除重复项</strong>，可<strong>使用集合<code>set()</code></strong></p><p><code>for language in set(favourite_languages.values()):</code>集合类似于列表，但其中的每个元素都是独一无二的</p><h3 id="3、嵌套"><a href="#3、嵌套" class="headerlink" title="3、嵌套"></a>3、嵌套</h3><h4 id="3-1-字典列表（在列表中嵌套字典）"><a href="#3-1-字典列表（在列表中嵌套字典）" class="headerlink" title="3.1 字典列表（在列表中嵌套字典）"></a>3.1 字典列表（在列表中嵌套字典）</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">alien_0 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span> <span class="token punctuation">:</span> <span class="token string">'green'</span> <span class="token punctuation">,</span> <span class="token string">' points'</span> <span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span>alien_1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span> <span class="token punctuation">:</span> <span class="token string">'green'</span> <span class="token punctuation">,</span> <span class="token string">' points'</span> <span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span>alien_2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span> <span class="token punctuation">:</span> <span class="token string">'green'</span> <span class="token punctuation">,</span> <span class="token string">' points'</span> <span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span>aliens <span class="token operator">=</span> <span class="token punctuation">[</span>alien_0<span class="token punctuation">,</span> alien_1<span class="token punctuation">,</span> alien_2<span class="token punctuation">]</span><span class="token keyword">for</span> alien <span class="token keyword">in</span> aliens<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>alien<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>alien是存储列表aliens中每个元素的临时变量，aliens中的每个元素是字典，所以alien存储的是字典</p><h4 id="3-2-在字典中存储列表"><a href="#3-2-在字典中存储列表" class="headerlink" title="3.2 在字典中存储列表"></a>3.2 在字典中存储列表</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">pizza <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'crust'</span> <span class="token punctuation">:</span> <span class="token string">'thick'</span><span class="token punctuation">,</span>    <span class="token string">'toppings'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Your ordered a "</span><span class="token operator">+</span> pizza<span class="token punctuation">[</span><span class="token string">'crust'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"-crust pizza"</span> <span class="token operator">+</span>     <span class="token string">"with the following toppings:"</span><span class="token punctuation">)</span><span class="token keyword">for</span> topping <span class="token keyword">in</span> pizza<span class="token punctuation">[</span><span class="token string">'toppings'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t"</span> <span class="token operator">+</span>topping<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每当需要在字典中将一个键关联到多个值时，可以<strong>在字典中嵌套一个值列表</strong>。当要访问值列表中的每个值时，需要使用 for 循环来遍历值列表</p><h4 id="3-3-在字典中存储字典"><a href="#3-3-在字典中存储字典" class="headerlink" title="3.3 在字典中存储字典"></a>3.3 在字典中存储字典</h4><p>在字典中嵌套一个值字典</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">users <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'auinstein'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token string">'first'</span><span class="token punctuation">:</span><span class="token string">'albert'</span><span class="token punctuation">,</span>        <span class="token string">'last'</span><span class="token punctuation">:</span><span class="token string">'einstein'</span><span class="token punctuation">,</span>        <span class="token string">'location'</span><span class="token punctuation">:</span><span class="token string">'princeton'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'mcurie'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token string">'first'</span><span class="token punctuation">:</span><span class="token string">'marie'</span><span class="token punctuation">,</span>        <span class="token string">'last'</span><span class="token punctuation">:</span><span class="token string">'curie'</span><span class="token punctuation">,</span>        <span class="token string">'location'</span><span class="token punctuation">:</span><span class="token string">'paris'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处，键是用户名，值是包含用户信息的字典<br><code>for username, user_info in users.items():</code> username 存储临时的键，user_info存储临时的值字典<br>可以用<code>user_info['first']</code>、<code>user_info['last']</code>、<code>user_info['location']</code>来访问值字典中的值</p><h2 id="第七章-用户输入和while循环"><a href="#第七章-用户输入和while循环" class="headerlink" title="第七章 用户输入和while循环"></a>第七章 用户输入和while循环</h2><h3 id="1、用户输入（字符串和数值）"><a href="#1、用户输入（字符串和数值）" class="headerlink" title="1、用户输入（字符串和数值）"></a>1、用户输入（字符串和数值）</h3><h4 id="1-1-函数input"><a href="#1-1-函数input" class="headerlink" title="1.1 函数input()"></a>1.1 函数input()</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">message <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Tell me something, and I will repeat it back to you: "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>input()</code>会让程序暂停运行，等待用户输入，并在<strong>用户按回车键后</strong>继续运行。获取用户输入后，Python将其以<strong>字符串</strong>的形式存储在一个变量中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">prompt <span class="token operator">=</span> <span class="token string">"If you tell us who you are, we can personalize the messages you see."</span>prompt <span class="token operator">+=</span><span class="token string">"\nWhat is your first name? "</span>name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nHello, "</span><span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果input()中的提示超过一行，可以用上述代码块表示</p><h4 id="1-2-使用int-来获取数值输入"><a href="#1-2-使用int-来获取数值输入" class="headerlink" title="1.2 使用int()来获取数值输入"></a>1.2 使用int()来获取数值输入</h4><p>由于Python是以<strong>字符串</strong>形式存储<code>input()</code>的输入值，所以在进行数值比较等时需要用函数<code>int()</code><strong>将字符串转换为数值</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">age <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"How old are you? "</span><span class="token punctuation">)</span>age <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2、while-循环"><a href="#2、while-循环" class="headerlink" title="2、while 循环"></a>2、while 循环</h3><h4 id="2-1-使用while循环"><a href="#2-1-使用while循环" class="headerlink" title="2.1 使用while循环"></a>2.1 使用while循环</h4><p>for循环用于针对集合中的每个元素都一个代码块，而while循环不断地运行，<strong>直到指定的条件不满足</strong>为止</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">prompt <span class="token operator">=</span> <span class="token string">"\nTell me something, and I will repeat it back to you: "</span>prompt <span class="token operator">+=</span> <span class="token string">"\nEnter 'quit' to end the program."</span>message <span class="token operator">=</span> <span class="token string">" "</span><span class="token keyword">while</span> message <span class="token operator">!=</span> <span class="token string">'quit'</span> <span class="token punctuation">:</span>    message <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>        <span class="token keyword">if</span> message <span class="token operator">!=</span> <span class="token string">'quit'</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首次执行while语句时，要将message中的值和’quit’进行比较，所以<strong>要提前给message指定一个初始值</strong>，这里是空字符串” “，否则没有可供比较的东西，Python将无法继续运行</p><h4 id="2-2-使用标志"><a href="#2-2-使用标志" class="headerlink" title="2.2 使用标志"></a>2.2 使用标志</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">prompt <span class="token operator">=</span> <span class="token string">"\nTell me something, and I will repeat it back to you: "</span>prompt <span class="token operator">+=</span> <span class="token string">"\nEnter 'quit' to end the program."</span>active <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">while</span> active<span class="token punctuation">:</span>    message <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>        <span class="token keyword">if</span> message <span class="token operator">==</span> <span class="token string">'quit'</span><span class="token punctuation">:</span>        active <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里将标志命名为active，使用标志能方便代码编写</p><h4 id="2-3-使用break退出循环"><a href="#2-3-使用break退出循环" class="headerlink" title="2.3 使用break退出循环"></a>2.3 使用break退出循环</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    city <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>        <span class="token keyword">if</span> city <span class="token operator">==</span> <span class="token string">'quit'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>while True打头的循环将不断运行，直到遇到break语句，将直接跳出循环</p><h4 id="2-4-使用continue返回到循环开头"><a href="#2-4-使用continue返回到循环开头" class="headerlink" title="2.4 使用continue返回到循环开头"></a>2.4 使用continue返回到循环开头</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">current_number <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> current_number <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>    current_number <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> current_number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>current_number<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>%是<strong>求模运算符</strong>，两数相除并返回余数。此处如果是偶数，则运行continue语句返回到开头，如果是奇数，则忽略if语句之后的缩进，继续运行下面的语句</p><h3 id="3、使用while循环来处理列表和字典"><a href="#3、使用while循环来处理列表和字典" class="headerlink" title="3、使用while循环来处理列表和字典"></a>3、使用while循环来处理列表和字典</h3><p>for循环是一种遍历列表的有效方式，但不能修改列表，若要修改可以用while循环</p><h4 id="3-1-在列表之间移动元素"><a href="#3-1-在列表之间移动元素" class="headerlink" title="3.1 在列表之间移动元素"></a>3.1 在列表之间移动元素</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">unconfirmed_users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'alice'</span><span class="token punctuation">,</span><span class="token string">'brian'</span><span class="token punctuation">,</span><span class="token string">'candace'</span><span class="token punctuation">]</span>confirmed_users <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token keyword">while</span> unconfirmed_users<span class="token punctuation">:</span>    current_user <span class="token operator">=</span> unconfirmed_users<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"verifying user: "</span><span class="token operator">+</span> current_user<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    confirmed_users<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_user<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nThe following users have been confirmed:"</span><span class="token punctuation">)</span><span class="token keyword">for</span> confirmed_user <span class="token keyword">in</span> confirmed_users<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>confirmed_user<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>while循环语句判断原列表是否为空，若不为空则继续执行循环，反则跳出循环。用了方法<code>pop()</code>来删除并获取原列表的末尾元素，再用方法<code>append()</code>来添加到新列表中</p><h4 id="3-2-删除包含特定值的所有列表元素"><a href="#3-2-删除包含特定值的所有列表元素" class="headerlink" title="3.2 删除包含特定值的所有列表元素"></a>3.2 删除包含特定值的所有列表元素</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">pets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'goldfish'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'rabbit'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token string">'cat'</span> <span class="token keyword">in</span> pets<span class="token punctuation">:</span>    pets<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pets<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>while语句判断’cat’是否还在列表pets里，如果在，则用方法<code>remove()</code>删除</p><h4 id="3-3-使用用户输入来填充字典"><a href="#3-3-使用用户输入来填充字典" class="headerlink" title="3.3 使用用户输入来填充字典"></a>3.3 使用用户输入来填充字典</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">responses <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>active <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">while</span> active<span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"\nWhat is your name? "</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Which mountain would you like to climb someday? "</span><span class="token punctuation">)</span>    responses<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> response        repeat <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Would you like to let another person respond? (yes/no) "</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> repeat <span class="token operator">==</span> <span class="token string">'no'</span><span class="token punctuation">:</span>        active <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---Results---"</span><span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> response <span class="token keyword">in</span> responses<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" would like to climb "</span><span class="token operator">+</span> response<span class="token operator">+</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用标志active来判断循环是否继续</p><h2 id="第八章-函数"><a href="#第八章-函数" class="headerlink" title="第八章 函数"></a>第八章 函数</h2><h3 id="1、定义函数"><a href="#1、定义函数" class="headerlink" title="1、定义函数"></a>1、定义函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">greet_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" 显示简单的问候语 """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span>greet_user<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处该函数不需要任何信息就能完成工作，因此括号里是空的。<br>第二行的文本是函数的注释，被称为“文档字符串”</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">greet_user</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" 显示简单的问候语 """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello, "</span><span class="token operator">+</span> username<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span>greet_user<span class="token punctuation">(</span><span class="token string">'Jesse'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在函数定义中，变量username是<strong>形参</strong>——函数完成其工作所需的一项信息<br>在<code>greet_user('Jesse')</code>中，’Jesse’是<strong>实参</strong>——调用函数时传递给函数的信息，这里这个实参值传递给函数后，存储在了形参username中</p><h3 id="2-传递实参"><a href="#2-传递实参" class="headerlink" title="2.传递实参"></a>2.传递实参</h3><h4 id="2-1-位置实参"><a href="#2-1-位置实参" class="headerlink" title="2.1 位置实参"></a>2.1 位置实参</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">describe_pet</span><span class="token punctuation">(</span>animal_type<span class="token punctuation">,</span> pet_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nI have a "</span><span class="token operator">+</span> animal_type<span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My "</span><span class="token operator">+</span> animal_type<span class="token operator">+</span> <span class="token string">"'s name is "</span><span class="token operator">+</span> pet_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span>    describe_pet<span class="token punctuation">(</span><span class="token string">'hamster'</span><span class="token punctuation">,</span> <span class="token string">'harry'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实参’hamster’存储在了形参animal_type中，而实参’harry’存储在了形参pet_name中<br>函数调用中<strong>实参</strong>的顺序与函数定义中<strong>形参</strong>的<strong>顺序一致</strong></p><h4 id="2-2-关键字实参"><a href="#2-2-关键字实参" class="headerlink" title="2.2 关键字实参"></a>2.2 关键字实参</h4><p><code>describe_pet(animal_type = 'hamster', pet_name = 'harry')</code></p><p>函数定义不变，但在调用函数时，明确<strong>指出各个实参所对应的形参</strong>，这时实参的顺序就无关紧要了</p><h4 id="2-3-默认值"><a href="#2-3-默认值" class="headerlink" title="2.3 默认值"></a>2.3 默认值</h4><p><code>def describe_pet(pet_name, animal_type = 'dog' ):</code></p><p>在定义函数时，可给形参指定默认值，若在之后调用函数时没有给该形参提供实参，就是用该默认值<br>为方便传递位置实参，在定义形参时要<strong>把没有默认值的形参放前面</strong></p><p>该函数可如下调用：<br><code>describe_pet('willie')</code> 位置实参，’willie’是小狗的名字，animal_type用默认值<br><code>describe_pet(pet_name = 'willie')</code> 关键字实参<br><code>describe_pet('harry', 'hamster')</code> 位置实参，animal_type用指定的实参<br><code>describe_pet(pet_name = 'harry', animal_type = 'hamster')</code> 关键字实参<br><code>describe_pet(animal_type = 'hamster', pet_name = 'harry')</code> 关键字实参</p><h3 id="3、返回值"><a href="#3、返回值" class="headerlink" title="3、返回值"></a>3、返回值</h3><h4 id="3-1-返回简单值"><a href="#3-1-返回简单值" class="headerlink" title="3.1 返回简单值"></a>3.1 返回简单值</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_formatted_name</span><span class="token punctuation">(</span>first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""返回简洁的名字"""</span>    full_name <span class="token operator">=</span> first_name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> last_name    <span class="token keyword">return</span> full_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>musician <span class="token operator">=</span> get_formatted_name<span class="token punctuation">(</span><span class="token string">'jimi'</span><span class="token punctuation">,</span> <span class="token string">'hendrix'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>musician<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用返回值的函数时，需要提供一个变量，用于存储返回的值，这里存储在了变量musician中</p><h4 id="3-2-让实参变成可选的"><a href="#3-2-让实参变成可选的" class="headerlink" title="3.2 让实参变成可选的"></a>3.2 让实参变成可选的</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_formatted_name</span><span class="token punctuation">(</span>first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> middle_name<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" 返回简洁的名字 """</span>    <span class="token keyword">if</span> middle_name<span class="token punctuation">:</span>        full_name <span class="token operator">=</span> first_name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> middle_name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span>last_name    <span class="token keyword">else</span><span class="token punctuation">:</span>        full_name <span class="token operator">=</span> first_name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span>last_name    <span class="token keyword">return</span> full_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>musician <span class="token operator">=</span> get_formatted_name<span class="token punctuation">(</span><span class="token string">'jimi'</span><span class="token punctuation">,</span> <span class="token string">'hendrix'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>musician<span class="token punctuation">)</span>musician <span class="token operator">=</span> get_formatted_name<span class="token punctuation">(</span><span class="token string">'jimi'</span><span class="token punctuation">,</span> <span class="token string">'hendrix'</span><span class="token punctuation">,</span> <span class="token string">'lee'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>musician<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给形参middle_name设定一个默认值——空字符串，函数内用判断语句，判断调用函数时是否给了形参middle_name新的实参值</p><h4 id="3-3-返回字典"><a href="#3-3-返回字典" class="headerlink" title="3.3 返回字典"></a>3.3 返回字典</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">build_person</span><span class="token punctuation">(</span>first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'first'</span> <span class="token punctuation">:</span> first_name<span class="token punctuation">,</span> <span class="token string">'last'</span> <span class="token punctuation">:</span> last_name<span class="token punctuation">}</span>    <span class="token keyword">if</span> age<span class="token punctuation">:</span>        person<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> age    <span class="token keyword">return</span> personmisician <span class="token operator">=</span> build_persoln<span class="token punctuation">(</span><span class="token string">'jimi'</span><span class="token punctuation">,</span> <span class="token string">'hendrix'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>musician<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里将age的默认值设为空字符串，作为调用函数时可写可不写的实参可选项</p><h3 id="4、传递列表"><a href="#4、传递列表" class="headerlink" title="4、传递列表"></a>4、传递列表</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">greet_users</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>        msg <span class="token operator">=</span> <span class="token string">"Hello, "</span><span class="token operator">+</span> name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"!"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>usernames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hannah'</span><span class="token punctuation">,</span> <span class="token string">'ty'</span><span class="token punctuation">,</span> <span class="token string">'margot'</span><span class="token punctuation">]</span>greet_users<span class="token punctuation">(</span>usernames<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实参是一个列表，传递给函数并存储在形参变量names里</p><p>为了防止函数修改原列表，可以用切片向函数传递列表的副本：<code>function_name(list_name[ : ])</code></p><h3 id="5、传递任何数量的实参"><a href="#5、传递任何数量的实参" class="headerlink" title="5、传递任何数量的实参"></a>5、传递任何数量的实参</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_pizza</span><span class="token punctuation">(</span><span class="token operator">*</span>toppings<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>toppings<span class="token punctuation">)</span>    make_pizza<span class="token punctuation">(</span><span class="token string">'pepperoni'</span><span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token string">'mushroom'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>预先不知道函数需要接受多少个实参，像上述代码有一个值或者三个值，这时就需要用到形参<code>*toppings</code>，星号让Python创建一个名为toppings的<strong>空元祖</strong>，并将收到的所有值都封装到这个元组中，该函数最终以元组形式输出</p><p>在函数定义中<strong>将接纳任意数量实参的形参放在最后</strong>，让Python先匹配位置实参和关键字实参，再将余下实参收集到最后一个带星号的形参中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">build_profile</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> <span class="token operator">**</span>user_info<span class="token punctuation">)</span><span class="token punctuation">:</span>    profile <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    profile<span class="token punctuation">[</span><span class="token string">'first_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> first    profile<span class="token punctuation">[</span><span class="token string">'last_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> last    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> user_info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        profile<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">return</span> profileuser_profile <span class="token operator">=</span> build_profile<span class="token punctuation">(</span><span class="token string">'albert'</span><span class="token punctuation">,</span> <span class="token string">'einstein'</span><span class="token punctuation">,</span> location<span class="token operator">=</span><span class="token string">'princeton'</span><span class="token punctuation">,</span> field<span class="token operator">=</span><span class="token string">'physics'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>user_profile<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用了任意数量的关键字实参，前俩是位置实参，后面的关键字实参全收集到了形参<code>**user_info</code>中<br>形参<code>**user_info</code>中的两个星号让Python创建一个名为user_info的<strong>空字典</strong>，并将收集到的所有名称-值封装到这个字典中</p><h3 id="6、将函数存储在模块中（import用法）"><a href="#6、将函数存储在模块中（import用法）" class="headerlink" title="6、将函数存储在模块中（import用法）"></a>6、将函数存储在模块中（import用法）</h3><p>将函数存储在被称为<code>模块</code>的独立文件中，<code>模块</code>是扩展名为<code>.py</code>的文件<br>用<code>import</code>语句在当前运行的程序文件中使用模块中的代码</p><p>首先创建文件<code>pizza.py</code>，里面包含函数<code>make_pizza()</code></p><p><code>import pizza</code>导入模块，<code>pizza.make_pizza()</code>来使用模块中的函数<br><code>from pizza import make_pizza</code>导入模块中的特定函数，可直接使用函数<code>make_pizza()</code><br><code>from pizza import make_pizza as mp</code>导入模块中的特定函数并给函数指定别名<code>mp</code>，可直接使用函数<code>mp()</code><br><code>import pizza as p</code>导入模块并给模块指定别名p，<code>p.make_pizza()</code>来使用模块中的函数</p><p><code>from pizza import *</code>可导入模块中的所有函数，<strong>一般不采用这种方法</strong>，防止模块中有函数的名称与你自己的项目中使用的名称相同而产生错误</p><h3 id="7、函数编写tips"><a href="#7、函数编写tips" class="headerlink" title="7、函数编写tips"></a>7、函数编写tips</h3><p><strong>给形参指定默认值时</strong>以及<strong>对于函数调用中的关键字实参</strong>，等号两边不要有空格</p><h2 id="第十章-文件"><a href="#第十章-文件" class="headerlink" title="第十章 文件"></a>第十章 文件</h2><h3 id="1、从文件中读取数据"><a href="#1、从文件中读取数据" class="headerlink" title="1、从文件中读取数据"></a>1、从文件中读取数据</h3><h4 id="1-1-读取整个文件"><a href="#1-1-读取整个文件" class="headerlink" title="1.1 读取整个文件"></a>1.1 读取整个文件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    contents <span class="token operator">=</span> file_object<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>函数<code>open()</code>打开文件，括号里的参数是文件路径，Python将该文件对象存储在变量file_object中<br>关键字with能在不需要访问文件后将其关闭<br>方法<code>read()</code>读取文件的全部内容，并将其<strong>以字符串形式</strong>存储在变量contents中</p><p>路径分为绝对路径和相对路径<br><strong>绝对路径</strong>表示方法：<code>r'E:\vscode_exercises\python\test.txt'</code>或者<code>'E:\\vscode_exercises\\python\\test.txt'</code></p><h4 id="1-2-逐行读取"><a href="#1-2-逐行读取" class="headerlink" title="1.2 逐行读取"></a>1.2 逐行读取</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'test.txt'</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> file_object<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-创建一个包含文件各行内容的列表"><a href="#1-3-创建一个包含文件各行内容的列表" class="headerlink" title="1.3 创建一个包含文件各行内容的列表"></a>1.3 创建一个包含文件各行内容的列表</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'test.txt'</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    lines <span class="token operator">=</span> file_object<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token comment"># 如果每行末尾有看不见的换行符就要改成print(line.rstrip())</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变量file_object中的文件对象只能在with代码块内使用，若要在代码块外访问文件的内容，可在with代码块内吧文件的每一行存储在一个列表中，并在with代码块外使用该列表</p><p>方法<code>readlines()</code>从文件中读取每一行，并将每一行作为一个元素存储在一个列表中，该列表存储到了变量lines中</p><h4 id="2、写入文件"><a href="#2、写入文件" class="headerlink" title="2、写入文件"></a>2、写入文件</h4><h4 id="2-1写入空文件"><a href="#2-1写入空文件" class="headerlink" title="2.1写入空文件"></a>2.1写入空文件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'test.txt'</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"I love programming."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将文本写入文件时，调用<code>open()</code>需要提供另一个实参<code>'w'</code>(写入模式)，以该模式打开文件时，如果指定文件已存在，Python将在<strong>返回文件对象前清空该文件</strong></p><p>若要写入的文件不存在，函数<code>open()</code>将自动创建它</p><p>另外还有<code>'r'</code>(读取模式)<code>'a'</code>(附加模式)<code>'r+'</code>(读取和写入文件的模式)</p><p>方法<code>write()</code>将字符串写入文件</p><h4 id="2-2-写入多行"><a href="#2-2-写入多行" class="headerlink" title="2.2 写入多行"></a>2.2 写入多行</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'test.txt'</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"I love programming.\n"</span><span class="token punctuation">)</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"I love creating new games.\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>若不用<code>\n</code>，在<code>.txt</code>文件中，两条输出会挨在一起</p><h4 id="2-3-将字符串添加到已有文件内容后面"><a href="#2-3-将字符串添加到已有文件内容后面" class="headerlink" title="2.3 将字符串添加到已有文件内容后面"></a>2.3 将字符串添加到已有文件内容后面</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'test.txt'</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"I love programming.\n"</span><span class="token punctuation">)</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"I love creating new games.\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>'a'</code>(附加模式)打开文件时，Python不会在返回文件对象前清空文件，而你<strong>写入到文件的行都将添加到文件末尾</strong>；若要写入的文件不存在，Python会创建一个空文件</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
